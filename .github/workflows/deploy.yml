name: Auto Deploy to VPS

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/antschw/schwager

jobs:
  # Detect which parts of the application have changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      nginx: ${{ steps.changes.outputs.nginx }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'backend/Dockerfile'
              - 'backend/.dockerignore'
            frontend:
              - 'frontend/**'
              - 'frontend/Dockerfile'
              - 'frontend/.dockerignore'
              - 'frontend/nginx.conf'
            nginx:
              - 'nginx/**'
            docker:
              - 'docker-compose.prod.yml'
              - '.github/workflows/deploy.yml'

  # Build and push backend image
  build-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.docker == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build and push frontend image
  build-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.docker == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to VPS
  deploy:
    needs: [detect-changes, build-backend, build-frontend]
    if: always() && github.ref == 'refs/heads/master' && (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped') && (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped')
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "🚀 Starting deployment..."

          # Change to project directory
          cd /var/www/schwager-fr

          # Pull latest changes (force reset to avoid conflicts)
          echo "📥 Pulling latest changes..."
          git fetch origin master
          git reset --hard origin/master

          # Log in to GitHub Container Registry
          echo "🔑 Logging in to GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Determine what to deploy based on changes
          BACKEND_CHANGED="${{ needs.detect-changes.outputs.backend }}"
          FRONTEND_CHANGED="${{ needs.detect-changes.outputs.frontend }}"
          NGINX_CHANGED="${{ needs.detect-changes.outputs.nginx }}"
          DOCKER_CHANGED="${{ needs.detect-changes.outputs.docker }}"

          echo "🔍 Changes detected:"
          echo "  Backend: $BACKEND_CHANGED"
          echo "  Frontend: $FRONTEND_CHANGED"
          echo "  Nginx: $NGINX_CHANGED"
          echo "  Docker: $DOCKER_CHANGED"

          # Update docker-compose with new images
          if [ "$BACKEND_CHANGED" == "true" ] || [ "$DOCKER_CHANGED" == "true" ]; then
            echo "🔄 Updating backend service..."
            sed -i 's|image: .*schwager-backend.*|image: ${{ env.IMAGE_PREFIX }}-backend:latest|g' docker-compose.prod.yml
          fi

          if [ "$FRONTEND_CHANGED" == "true" ] || [ "$DOCKER_CHANGED" == "true" ]; then
            echo "🔄 Updating frontend service..."
            sed -i 's|image: .*schwager-frontend.*|image: ${{ env.IMAGE_PREFIX }}-frontend:latest|g' docker-compose.prod.yml
          fi

          # Pull new images
          echo "📦 Pulling Docker images..."
          if [ "$BACKEND_CHANGED" == "true" ] || [ "$DOCKER_CHANGED" == "true" ]; then
            docker pull ${{ env.IMAGE_PREFIX }}-backend:latest
          fi
          if [ "$FRONTEND_CHANGED" == "true" ] || [ "$DOCKER_CHANGED" == "true" ]; then
            docker pull ${{ env.IMAGE_PREFIX }}-frontend:latest
          fi

          # Stop existing services to avoid port conflicts
          echo "🛑 Stopping existing services..."
          docker-compose -f docker-compose.prod.yml down || echo "⚠️ No existing services running"

          # Deploy services
          echo "🚀 Starting services..."
          if [ "$BACKEND_CHANGED" == "true" ] || [ "$FRONTEND_CHANGED" == "true" ] || [ "$NGINX_CHANGED" == "true" ] || [ "$DOCKER_CHANGED" == "true" ]; then
            docker-compose -f docker-compose.prod.yml up -d
          fi

          # Wait for services to be ready
          echo "⏳ Waiting for services to start..."
          sleep 30

          # Run database migrations if backend changed or docker config changed
          if [ "$BACKEND_CHANGED" == "true" ] || [ "$DOCKER_CHANGED" == "true" ]; then
            echo "🗄️ Running database migrations..."
            docker-compose -f docker-compose.prod.yml exec -T backend npx prisma migrate deploy || echo "⚠️ Migration failed or not needed"
          fi

          # Clean up old images
          echo "🧹 Cleaning up old images..."
          docker image prune -f

          # Health check
          echo "🩺 Performing health checks..."
          sleep 10
          
          if [ "$BACKEND_CHANGED" == "true" ] || [ "$DOCKER_CHANGED" == "true" ]; then
            if ! curl -f http://localhost:4000/api/healthcheck > /dev/null 2>&1; then
              echo "❌ Backend health check failed"
              exit 1
            fi
          fi

          if [ "$FRONTEND_CHANGED" == "true" ] || [ "$DOCKER_CHANGED" == "true" ]; then
            if ! curl -f http://localhost:3000/health > /dev/null 2>&1; then
              echo "❌ Frontend health check failed"
              exit 1
            fi
          fi

          echo "✅ Deployment completed successfully!"
          EOF

          # Copy and execute deployment script on VPS
          scp deploy.sh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/deploy.sh
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment to VPS completed successfully!"
          echo "🔗 Backend: https://schwager.fr/api-docs"
          echo "🔗 Frontend: https://schwager.fr"